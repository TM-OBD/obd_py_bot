from aiogram import Dispatcher
from aiogram.types import Message, ContentType

from tgbot.keyboards.all_replykeyboard import Reply_board
from tgbot.models.Main_requests_to_server import MainRequests


async def user_start1(message: Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç, —è –±–æ—Ç –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ OBD. –Ø–∫—â–æ —Ö–æ—á–µ—à –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ, –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É /info,"
                         " –∞–ª–µ —è–∫—â–æ —Ö–æ—á–µ—à –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è, –Ω–∞—Ç–∏—Å–∫–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.üîΩ",
                         reply_markup=Reply_board().replay_start1())


async def user_start2(message: Message):
    if MainRequests.is_authorized():
        if MainRequests.is_client():
            await message.answer("You are client")
        else:
            await message.answer("–ù–∞–∂–∞–ª—å, –≤–∏ –Ω–µ —î –Ω–∞—à–∏–º –∫–ª—ñ—î–Ω—Ç–æ–º.")
    # await message.answer("", reply_markup=Reply_board().replay_start2())
    else:
        await message.answer("–î–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º. üôá",
                             reply_markup=Reply_board().replay_start2())


async def user_start3(message: Message):
    user_id = message.from_user.id
    contact_id = message.contact.user_id
    if user_id == contact_id:
        if not MainRequests.is_authorized():
            MainRequests.authorization()
            if MainRequests.is_client():
                await message.answer("–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!",
                                     reply_markup=Reply_board(one_time_keyboard=True).replay_start3())
            else:
                await message.answer("–ù–∞–∂–∞–ª—å, –≤–∏ –Ω–µ —î –Ω–∞—à–∏–º –∫–ª—ñ—î–Ω—Ç–æ–º.",
                                     reply_markup=Reply_board(one_time_keyboard=True).replay_keyboard(
                                         "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥"))


async def user_back(message: Message):
    await user_start1(message)


def register_user(dp: Dispatcher):
    dp.register_message_handler(user_start1, commands="start")
    dp.register_message_handler(user_start2, text="–û—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç")
    dp.register_message_handler(user_start3, content_types=ContentType.CONTACT)
    dp.register_message_handler(user_back, text="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥")
