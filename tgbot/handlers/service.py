from aiogram import Dispatcher
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher import FSMContext

from tgbot.filters.filter_—Åities import filter_cities_service
from tgbot.keyboards.all_replykeyboard import Reply_board
from tgbot.keyboards.all_inlinekeyboard import Inner_board
from tgbot.misc.states import State_cto


async def serv_cto1(message: Message, state: FSMContext):
    await message.answer("<code>–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –º–∞—à–∏–Ω</code>",
                         reply_markup=Inner_board.inline_for_sto("–ê–≤—Ç–æ 1", "–ê–≤—Ç–æ 2"))
    await State_cto.st1.set()


async def serv_cto2(call: CallbackQuery, state: FSMContext):
    await call.bot.edit_message_text(text="<b>–û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É –¥–ª—è –≤–∞—à–æ–≥–æ –∞–≤—Ç–æüîΩ</b>", chat_id=call.message.chat.id,
                                     message_id=call.message.message_id,
                                     reply_markup=Inner_board.inline_for_sto("–®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂", "CTO"))
    await state.update_data(previous_state="State_cto.st2")
    await State_cto.st2.set()


async def serv_cto3(call: CallbackQuery, state: FSMContext):
    if call.data == "CTO":
        await call.bot.edit_message_text("<code>–¶—è –∫–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–±—É–≤–∞—î —É —Ä–æ–∑—Ä–æ–±—Ü—ñ</code>", chat_id=call.message.chat.id,
                                         message_id=call.message.message_id)
        await state.finish()
    else:
        await call.bot.edit_message_text(text="<b>–û–±–µ—Ä—ñ—Ç—å —â–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æüîΩ</b>", chat_id=call.message.chat.id,
                                         message_id=call.message.message_id,
                                         reply_markup=Inner_board.inline_for_sto("–°–µ–∑–æ–Ω–Ω–∞ –∑–∞–º—ñ–Ω–∞",
                                                                                 "–ü–æ–∑–∞–ø–ª–∞–Ω–æ–≤–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è"))
        await State_cto.st3.set()


async def serv_cto4(call: CallbackQuery, state: FSMContext):
    await state.update_data(data1=call.data)
    await call.message.answer(
        text="<b>–î–æ–±—Ä–µ, –≤–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å —Å–∞–º—ñüó∫</b>",
        reply_markup=Reply_board(one_time_keyboard=True).replay_serv_city("–û–¥–µ—Å—Å–∞", "–•–∞—Ä–∫—ñ–≤", "–ö–∏—ó–≤",
                                                                          "–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫"))
    await State_cto.st4.set()


async def serv_cto4_5(message: Message, state: FSMContext):
    output = filter_cities_service(str(message.text))
    if not output:
        await message.answer(
            '–Ø –Ω–µ –∑–º—ñ–≥ –≤–ø—ñ–∑–Ω–∞—Ç–∏ –≤–≤–µ–¥–µ–Ω–µ –º—ñ—Å—Ç–æ, —Å–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —â–µ —Ä–∞–∑ –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–µ –º—ñ—Å—Ç–æ —É –∫–Ω–æ–ø–∫–∞—Ö')
        return
    else:
        await serv_cto5(message, state)


async def serv_cto5(message: Message, state: FSMContext):
    city = filter_cities_service(str(message.text))
    await state.update_data(data2=city)
    await message.answer("<b>–í–∏–±–µ—Ä–µ—Ç–µ –∞–¥—Ä–µ—Å—É —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂—Éüó∫</b>",
                         reply_markup=Inner_board.inline_for_sto("–ê–¥—Ä–µ—Å1", "–ê–¥—Ä–µ—Å2"))
    await State_cto.st5.set()


async def serv_cto6(call: CallbackQuery, state: FSMContext):
    await state.update_data(data3=call.data)
    await call.bot.edit_message_text("<b>–¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –∏ —á–∞—Å üïõ –∑—ñ —Å–ø–∏—Å–∫—É –Ω–∏–∂—á–µüîΩ</b>", chat_id=call.message.chat.id,
                                     message_id=call.message.message_id,
                                     reply_markup=Inner_board.inline_for_sto("08.02", "09.02", "10.2"))
    await State_cto.st6.set()


async def serv_cto7(call: CallbackQuery, state: FSMContext):
    await state.update_data(data4=call.data)
    if call.data == "08.02":
        await call.bot.edit_message_reply_markup(chat_id=call.message.chat.id,
                                                 message_id=call.message.message_id,
                                                 reply_markup=Inner_board.inline_for_sto("13:00", "14:00", "18:00",
                                                                                         "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –¥–∞—Ç"))
    elif call.data == "09.02":
        await call.bot.edit_message_reply_markup(chat_id=call.message.chat.id,
                                                 message_id=call.message.message_id,
                                                 reply_markup=Inner_board.inline_for_sto("9:00", "10:00", "13:00"))
    elif call.data == "10.2":
        await call.bot.edit_message_reply_markup(chat_id=call.message.chat.id,
                                                 message_id=call.message.message_id,
                                                 reply_markup=Inner_board.inline_for_sto("10:00", "14:00", "15:00"))
    await State_cto.st7.set()


async def serv_cto8(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await call.bot.edit_message_text(chat_id=call.message.chat.id,
                                     message_id=call.message.message_id,
                                     text="<b>–ß—É–¥–æ–≤–æ, –∑–∞–ø–∏—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ, –º–µ–Ω–µ–¥–∂–µ—Ä –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å –≤–∞–º –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º‚úÖ</b>"
                                          "\n<b>–í–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ:</b>\n\n<code>–ü–æ—Å–ª—É–≥–∞:</code> <b>{data1}</b>\n<code>–ú—ñ—Å—Ç–æ:</code> <b>{data2}</b> üó∫\n<code>–ê–¥—Ä–µ—Å:</code> <b>{data3} üó∫</b>\n<code>–î–∞—Ç–∞:</code> {data4} üìÖ\n<code>–ß–∞—Å:</code> <b>{data5} "
                                          "üïõ</b>".format(
                                         data1=data.get("data1"), data2=data.get("data2"), data3=data.get("data3"),
                                         data4=data.get("data4"), data5=call.data))
    await state.finish()


def register_serv_cto(dp: Dispatcher):
    dp.register_message_handler(serv_cto1, commands="services")
    dp.register_callback_query_handler(serv_cto2, state=State_cto.st1)
    dp.register_callback_query_handler(serv_cto3, state=State_cto.st2)
    dp.register_callback_query_handler(serv_cto4, state=State_cto.st3)
    dp.register_message_handler(serv_cto4_5, state=State_cto.st4)
    dp.register_message_handler(serv_cto5, state=State_cto.st4)
    dp.register_callback_query_handler(serv_cto6, state=State_cto.st5)
    dp.register_callback_query_handler(serv_cto7, state=State_cto.st6, text=["08.02", "09.02", "10.2"])
    dp.register_callback_query_handler(serv_cto8, state=State_cto.st7)
