from aiogram import Dispatcher
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.dispatcher import FSMContext

from tgbot.filters.filter_—Åities import filter_cities_service
from tgbot.keyboards.all_replykeyboard import Reply_board
from tgbot.keyboards.all_inlinekeyboard import Inner_board
from tgbot.misc.states import State_cto
from tgbot.services.fresh_requests import FreshServiceRequests


async def serv_cto1(message: Message):
    await message.answer("<code>–û–±–µ—Ä—ñ—Ç—å –∞–≤—Ç–æ –¥–ª—è –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è</code>",
                         reply_markup=Inner_board.inline_for_sto("–ê–≤—Ç–æ 1", "–ê–≤—Ç–æ 2"))
    await State_cto.st1.set()


async def serv_cto2(call: CallbackQuery, state: FSMContext):
    await call.bot.edit_message_text(text="<b>–û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É –¥–ª—è –≤–∞—à–æ–≥–æ –∞–≤—Ç–æüîΩ</b>", chat_id=call.message.chat.id,
                                     message_id=call.message.message_id,
                                     reply_markup=Inner_board.inline_for_sto("–®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂", "CTO"))
    await state.update_data(previous_state="State_cto.st2")
    await State_cto.st2.set()


async def serv_cto3(call: CallbackQuery, state: FSMContext):
    if call.data == "CTO":
        await call.bot.edit_message_text("<code>–¶—è –∫–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–±—É–≤–∞—î —É —Ä–æ–∑—Ä–æ–±—Ü—ñ</code>", chat_id=call.message.chat.id,
                                         message_id=call.message.message_id)
        await state.finish()
    else:
        await state.update_data(current_state="serv_cto3")
        await call.bot.edit_message_text(text="<b>–û–±–µ—Ä—ñ—Ç—å —â–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æüîΩ</b>", chat_id=call.message.chat.id,
                                         message_id=call.message.message_id,
                                         reply_markup=Inner_board.inline_for_sto("–°–µ–∑–æ–Ω–Ω–∞ –∑–∞–º—ñ–Ω–∞",
                                                                                 "–ü–æ–∑–∞–ø–ª–∞–Ω–æ–≤–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è"))
        await State_cto.st3.set()


async def serv_cto4(call: CallbackQuery, state: FSMContext):
    previous_state = (await state.get_data()).get("current_state")
    if previous_state == "serv_cto3":
        await state.update_data(data1=call.data, current_state="serv_cto4")
    await call.message.answer(
        text="<b>–î–æ–±—Ä–µ, –≤–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å —Å–∞–º—ñüó∫</b>",
        reply_markup=Reply_board(one_time_keyboard=True).replay_serv_city("–û–¥–µ—Å—Å–∞", "–•–∞—Ä–∫—ñ–≤", "–ö–∏—ó–≤",
                                                                          "–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫"))
    await State_cto.st4.set()


async def serv_cto4_5(message: Message, state: FSMContext):
    # print(f"serv_cto 4_5: {message}")
    # await state.update_data(current_state="serv_cto4_5")
    output = filter_cities_service(str(message.text))
    if not output:
        print(message)
        await message.answer(
            '–Ø –Ω–µ –∑–º—ñ–≥ –≤–ø—ñ–∑–Ω–∞—Ç–∏ –≤–≤–µ–¥–µ–Ω–µ –º—ñ—Å—Ç–æ, —Å–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —â–µ —Ä–∞–∑ –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–µ –º—ñ—Å—Ç–æ —É –∫–Ω–æ–ø–∫–∞—Ö')
        return
    else:
        await message.reply(f"–ú—ñ—Å—Ç–æ {output}?", reply_markup=Inner_board.inline_for_sto("–¢–∞–∫", "–ù—ñ"))


async def serv_cto_4_5_yes_no(call: CallbackQuery, state: FSMContext):
    # print(f"serv_cto 4_5_y_n: {call.message.text}")
    if call.data == "–¢–∞–∫":
        await serv_cto5(call.message, state)
    else:
        # previous_state = (await state.get_data()).get("current_state")
        # if previous_state == "serv_cto4_5":
        # data = await state.get_data()
        await state.update_data(current_state="serv_y_n")
        await serv_cto4(call, state)
        # await state.update_data(**data)
    # else:
    #     await serv_cto4(call, state)


async def serv_cto5(message: Message, state: FSMContext):
    await message.delete()
    previous_state = (await state.get_data()).get("current_state")
    if previous_state in ["serv_cto4", "serv_y_n"]:
        text = message.text.split()[1][:-1]
        # print(f"serv_cto 5: {text}")
        city = filter_cities_service(str(text))
        await state.update_data(data2=city, current_state="serv_cto5")

    await message.answer("<b>–í–∏–±–µ—Ä–µ—Ç–µ –∞–¥—Ä–µ—Å—É —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂—Éüó∫</b>",
                         reply_markup=Inner_board.inline_for_sto("–ê–¥—Ä–µ—Å1", "–ê–¥—Ä–µ—Å2", "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–∏–±–æ—Ä—É –º—ñ—Å—Ç–∞"))
    await State_cto.st5.set()


async def serv_back_in_4(call: CallbackQuery, state: FSMContext):
    previous_state = (await state.get_data()).get("current_state")
    if previous_state == "serv_cto5":
        data = await state.get_data()
        await serv_cto4(call, state)
        await state.update_data(**data)


# async def serv_cto6(call: CallbackQuery, state: FSMContext):
#     # print(f"serv_cto 6: {call.data}")
#     await state.update_data(data3=call.data, current_state="serv_cto6")
#     await call.bot.edit_message_text("<b>–¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –∏ —á–∞—Å üïõ –∑—ñ —Å–ø–∏—Å–∫—É –Ω–∏–∂—á–µüîΩ</b>", chat_id=call.message.chat.id,
#                                      message_id=call.message.message_id,
#                                      reply_markup=Inner_board.inline_for_sto("08.02", "09.02", "10.2",
#                                                                              "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–∏–±–æ—Ä—É –∞–¥—Ä–µ—Å–∏"))
#     await State_cto.st6.set()


# async def serv_back_in_5(call: CallbackQuery, state: FSMContext):
#     previous_state = (await state.get_data()).get("current_state")
#     if previous_state == "serv_cto6":
#         data = await state.get_data()
#         await serv_cto5(call.message, state)
#         await state.update_data(**data)


# async def serv_cto7(call: CallbackQuery, state: FSMContext):
#     await state.update_data(data4=call.data, current_state="serv_cto7")
#     if call.data == "08.02":
#         await call.bot.edit_message_reply_markup(chat_id=call.message.chat.id,
#                                                  message_id=call.message.message_id,
#                                                  reply_markup=Inner_board.inline_for_sto("13:00", "14:00", "18:00",
#                                                                                          "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –¥–∞—Ç"))
#     elif call.data == "09.02":
#         await call.bot.edit_message_reply_markup(chat_id=call.message.chat.id,
#                                                  message_id=call.message.message_id,
#                                                  reply_markup=Inner_board.inline_for_sto("9:00", "10:00", "13:00",
#                                                                                          "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –¥–∞—Ç"))
#     elif call.data == "10.2":
#         await call.bot.edit_message_reply_markup(chat_id=call.message.chat.id,
#                                                  message_id=call.message.message_id,
#                                                  reply_markup=Inner_board.inline_for_sto("10:00", "14:00", "15:00",
#                                                                                          "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –¥–∞—Ç"))
#     await State_cto.st7.set()


# async def serv_back_in_6(call: CallbackQuery, state: FSMContext):
#     previous_state = (await state.get_data()).get("current_state")
#     if previous_state == "serv_cto7":
#         data = await state.get_data()
#         await serv_cto6(call, state)
#         await state.update_data(**data)
async def last_question(call: CallbackQuery, state: FSMContext):
    # print("last_question")
    await call.message.delete()
    data = await state.get_data()
    # await state.update_data(data3=call.data)
    await call.bot.send_message(call.message.chat.id, "–ó–∞–ø–∏—Ç –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ, –≤–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ?"
                                                      "\n<b>–í–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ:</b>\n\n<code>–ü–æ—Å–ª—É–≥–∞:</code> <b>{data1}</b>\n<code>–ú—ñ—Å—Ç–æ:</code> <b>{data2}</b> üó∫\n<code>–ê–¥—Ä–µ—Å:</code> <b>{data3} üó∫</b>".format(
        data1=data.get("data1"), data2=data.get("data2"), data3=call.data),
                                reply_markup=Inner_board.inline_for_sto("–¢–∞–∫!", "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥"))
    await State_cto.st6.set()


async def between_two_fires(call: CallbackQuery, state: FSMContext):
    # print("between_two_fires")
    if call.data == "–¢–∞–∫!":
        await serv_cto8(call, state)
    else:
        data = await state.get_data()
        await serv_cto5(call.message, state)
        await state.update_data(**data)


async def serv_cto8(call: CallbackQuery, state: FSMContext):
    await call.message.delete()
    data = await state.get_data()

    await call.message.answer(text="<b>–ß—É–¥–æ–≤–æ, –∑–∞–ø–∏—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ, –º–µ–Ω–µ–¥–∂–µ—Ä –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å –≤–∞–º –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º‚úÖ</b>"
                                   "\n<b>–í–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ:</b>\n\n<code>–ü–æ—Å–ª—É–≥–∞:</code> <b>{data1}</b>\n<code>–ú—ñ—Å—Ç–æ:</code> <b>{data2}</b> üó∫\n<code>–ê–¥—Ä–µ—Å:</code> <b>{data3} üó∫</b>".format(
        data1=data.get("data1"), data2=data.get("data2"), data3=call.message.text.split()[-2]),
        reply_markup=ReplyKeyboardRemove())
    subject = data.get("data1")
    description = f"City: {data.get('data2')}, Address: {call.message.text.split()[-2]}"
    c = FreshServiceRequests()
    c.create_ticket(subject=subject, description=description)
    await state.finish()


def register_serv_cto(dp: Dispatcher):
    dp.register_message_handler(serv_cto1, commands="services", state="*")
    dp.register_callback_query_handler(serv_cto2, state=State_cto.st1)
    dp.register_callback_query_handler(serv_cto3, state=State_cto.st2)
    dp.register_callback_query_handler(serv_cto4, state=State_cto.st3)
    dp.register_message_handler(serv_cto4_5, state=State_cto.st4)
    dp.register_callback_query_handler(serv_cto_4_5_yes_no, state=State_cto, text=["–¢–∞–∫", "–ù—ñ"])
    dp.register_message_handler(serv_cto5, state=State_cto.st4)
    dp.register_callback_query_handler(serv_back_in_4, state=State_cto, text="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–∏–±–æ—Ä—É –º—ñ—Å—Ç–∞")
    # dp.register_callback_query_handler(serv_cto6, state=State_cto.st5)
    # dp.register_callback_query_handler(serv_back_in_5, state=State_cto, text="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–∏–±–æ—Ä—É –∞–¥—Ä–µ—Å–∏")
    # dp.register_callback_query_handler(serv_cto7, state=State_cto.st6, text=["08.02", "09.02", "10.2"])
    # dp.register_callback_query_handler(serv_back_in_6, state=State_cto, text="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –¥–∞—Ç")
    dp.register_callback_query_handler(last_question, state=State_cto.st5)
    dp.register_callback_query_handler(between_two_fires, state=State_cto, text=["–¢–∞–∫", "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥"])
    dp.register_callback_query_handler(serv_cto8, state=State_cto.st6)
